connectors {
  s3 {
    s3up1 {
      access_key_id = ACCESSKEY
      description = ""
      enable = true
      host = s3
      port = 9000
      resource_opts {
        health_check_interval = "15s"
        start_after_created = true
        start_timeout = "5s"
      }
      secret_access_key = SECRETKEY
      transport_options {
        connect_timeout = "15s"
        enable_pipelining = 100
        headers {}
        ipv6_probe = false
        pool_size = 8
        pool_type = random
        ssl {
          ciphers = []
          depth = 10
          enable = false
          hibernate_after = "5s"
          log_level = notice
          reuse_sessions = true
          secure_renegotiate = true
          verify = verify_peer
          versions = [
            "tlsv1.3",
            "tlsv1.2"
          ]
        }
      }
    }
  }
}

actions {
  s3 {
    up1 {
      connector = s3up1
      description = ""
      enable = true
      parameters {
        acl = private
        aggregation {
          max_records = 10
          time_interval = "30s"
        }
        bucket = demobucket
        container {column_order = [], type = csv}
        headers {}
        key = "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv"
        max_part_size = "5gb"
        min_part_size = "5mb"
        mode = aggregated
      }
      resource_opts {
        batch_size = 100
        batch_time = "10ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
  }
}

rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    rule_zmas {
      actions = [
        "s3:up1"
      ]
      description = ""
      enable = true
      metadata {created_at = 1730804874847}
      name = ""
      sql = """~
        SELECT
          *
        FROM
          "#"
        WHERE
          regex_match(client_attrs.vin, '^v2-.*')~"""
    }
  }
}

